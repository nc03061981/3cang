#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ki·ªÉm tra v√† hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
"""

import os
import glob
import numpy as np
import tensorflow as tf
from datetime import datetime

def get_model_info():
    """L·∫•y th√¥ng tin v·ªÅ c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán"""
    print("=== KI·ªÇM TRA M√î H√åNH ƒê√É HU·∫§N LUY·ªÜN ===\n")
    
    # T√¨m t·∫•t c·∫£ c√°c file m√¥ h√¨nh
    keras_models = glob.glob("lottery_model_*.keras")
    h5_models = glob.glob("lottery_model_*.h5")
    all_models = keras_models + h5_models
    
    if not all_models:
        print("‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh n√†o ƒë√£ hu·∫•n luy·ªán!")
        print("Vui l√≤ng ch·∫°y script lottery_prediction_model.py tr∆∞·ªõc")
        return
    
    print(f"‚úÖ T√¨m th·∫•y {len(all_models)} m√¥ h√¨nh:")
    print("-" * 80)
    
    for i, model_path in enumerate(all_models, 1):
        # L·∫•y th√¥ng tin file
        file_size = os.path.getsize(model_path) / (1024 * 1024)  # MB
        mod_time = datetime.fromtimestamp(os.path.getmtime(model_path))
        
        # X√°c ƒë·ªãnh lo·∫°i m√¥ h√¨nh
        if "raw_numbers" in model_path:
            model_type = "Raw Numbers (000-999)"
        elif "sum" in model_path:
            model_type = "Sum (0-27)"
        elif "counts" in model_path:
            model_type = "Digit Counts (0-9)"
        else:
            model_type = "Unknown"
        
        # Ki·ªÉm tra scaler
        base_path = model_path.replace('.keras', '').replace('.h5', '')
        scaler_path = f"{base_path}_scaler.npy"
        has_scaler = os.path.exists(scaler_path)
        
        print(f"{i}. {os.path.basename(model_path)}")
        print(f"   Lo·∫°i: {model_type}")
        print(f"   K√≠ch th∆∞·ªõc: {file_size:.2f} MB")
        print(f"   Ng√†y t·∫°o: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Scaler: {'‚úÖ C√≥' if has_scaler else '‚ùå Kh√¥ng c√≥'}")
        
        # Ki·ªÉm tra m√¥ h√¨nh c√≥ load ƒë∆∞·ª£c kh√¥ng
        try:
            model = tf.keras.models.load_model(model_path)
            model.summary()
            print(f"   Tr·∫°ng th√°i: ‚úÖ Load th√†nh c√¥ng")
        except Exception as e:
            print(f"   Tr·∫°ng th√°i: ‚ùå L·ªói load: {str(e)}")
        
        print("-" * 80)
    
    # Th·ªëng k√™
    print("\nüìä TH·ªêNG K√ä:")
    print(f"T·ªïng s·ªë m√¥ h√¨nh: {len(all_models)}")
    print(f"M√¥ h√¨nh .keras: {len(keras_models)}")
    print(f"M√¥ h√¨nh .h5: {len(h5_models)}")
    
    # Ki·ªÉm tra scaler
    scalers = glob.glob("lottery_model_*_scaler.npy")
    print(f"Scaler c√≥ s·∫µn: {len(scalers)}")
    
    # M√¥ h√¨nh m·ªõi nh·∫•t
    if all_models:
        latest_model = max(all_models, key=os.path.getmtime)
        print(f"M√¥ h√¨nh m·ªõi nh·∫•t: {os.path.basename(latest_model)}")

def check_data_file():
    """Ki·ªÉm tra file d·ªØ li·ªáu"""
    print("\n=== KI·ªÇM TRA FILE D·ªÆ LI·ªÜU ===\n")
    
    data_file = "data-dacbiet.txt"
    if not os.path.exists(data_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu: {data_file}")
        return
    
    # ƒê·ªçc v√† ph√¢n t√≠ch d·ªØ li·ªáu
    with open(data_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # L·ªçc d·ªØ li·ªáu h·ª£p l·ªá
    valid_numbers = []
    invalid_lines = []
    
    for i, line in enumerate(lines, 1):
        line = line.strip()
        if line.isdigit() and len(line) == 3:
            valid_numbers.append(int(line))
        elif line:  # B·ªè qua d√≤ng tr·ªëng
            invalid_lines.append((i, line))
    
    print(f"‚úÖ File d·ªØ li·ªáu: {data_file}")
    print(f"T·ªïng s·ªë d√≤ng: {len(lines)}")
    print(f"S·ªë h·ª£p l·ªá: {len(valid_numbers)}")
    print(f"S·ªë kh√¥ng h·ª£p l·ªá: {len(invalid_lines)}")
    
    if valid_numbers:
        print(f"Ph·∫°m vi s·ªë: {min(valid_numbers):03d} - {max(valid_numbers):03d}")
        print(f"10 s·ªë g·∫ßn nh·∫•t: {valid_numbers[-10:]}")
    
    if invalid_lines:
        print(f"\n‚ö†Ô∏è  C√°c d√≤ng kh√¥ng h·ª£p l·ªá (5 d√≤ng ƒë·∫ßu):")
        for i, (line_num, content) in enumerate(invalid_lines[:5]):
            print(f"   D√≤ng {line_num}: '{content}'")

def main():
    """H√†m ch√≠nh"""
    print("üîç KI·ªÇM TRA H·ªÜ TH·ªêNG D·ª∞ ƒêO√ÅN X·ªî S·ªê\n")
    
    # Ki·ªÉm tra m√¥ h√¨nh
    get_model_info()
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    check_data_file()
    
    print("\n" + "="*80)
    print("üéØ H∆Ø·ªöNG D·∫™N TI·∫æP THEO:")
    if not glob.glob("lottery_model_*"):
        print("1. Ch·∫°y: python lottery_prediction_model.py")
        print("2. Ch·ªù hu·∫•n luy·ªán ho√†n t·∫•t")
        print("3. Ch·∫°y: python predict_lottery.py")
    else:
        print("1. Ch·∫°y: python predict_lottery.py")
        print("2. Ho·∫∑c hu·∫•n luy·ªán l·∫°i: python lottery_prediction_model.py")
    print("="*80)

if __name__ == "__main__":
    main()
