#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d·ªçn d·∫πp c√°c model c≈© v√† scaler
"""

import os
import glob
from datetime import datetime

def cleanup_old_models(model_type=None, keep_latest=True):
    """X√≥a c√°c model c≈©, ch·ªâ gi·ªØ l·∫°i model m·ªõi nh·∫•t"""
    print("=== D·ªåN D·∫∏P MODEL C≈® ===\n")
    
    try:
        if model_type:
            # D·ªçn d·∫πp model c·ª• th·ªÉ
            model_pattern = f"lottery_model_{model_type}_*.keras"
            scaler_pattern = f"lottery_model_{model_type}_*_scaler.npy"
            print(f"üßπ ƒêang d·ªçn d·∫πp model {model_type}...")
        else:
            # D·ªçn d·∫πp t·∫•t c·∫£ model
            model_pattern = "lottery_model_*.keras"
            scaler_pattern = "*_scaler.npy"
            print("üßπ ƒêang d·ªçn d·∫πp t·∫•t c·∫£ model...")
        
        # T√¨m t·∫•t c·∫£ file model v√† scaler
        model_files = glob.glob(model_pattern)
        scaler_files = glob.glob(scaler_pattern)
        
        print(f"üìÅ T√¨m th·∫•y {len(model_files)} file model v√† {len(scaler_files)} file scaler")
        
        if len(model_files) == 0:
            print("‚úÖ Kh√¥ng c√≥ model n√†o ƒë·ªÉ d·ªçn d·∫πp")
            return
        
        if len(model_files) <= 1 and keep_latest:
            print("‚úÖ Ch·ªâ c√≥ 1 model, kh√¥ng c·∫ßn d·ªçn d·∫πp")
            return
        
        # S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
        model_files.sort(key=os.path.getmtime, reverse=True)
        scaler_files.sort(key=os.path.getmtime, reverse=True)
        
        # Hi·ªÉn th·ªã danh s√°ch file
        print(f"\nüìã Danh s√°ch file model:")
        for i, file_path in enumerate(model_files):
            file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
            status = "üÜï M·ªöI NH·∫§T" if i == 0 else "üóëÔ∏è  S·∫º X√ìA"
            print(f"  {i+1}. {os.path.basename(file_path)} - {file_time.strftime('%Y-%m-%d %H:%M:%S')} {status}")
        
        print(f"\nüìã Danh s√°ch file scaler:")
        for i, file_path in enumerate(scaler_files):
            file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
            status = "üÜï M·ªöI NH·∫§T" if i == 0 else "üóëÔ∏è  S·∫º X√ìA"
            print(f"  {i+1}. {os.path.basename(file_path)} - {file_time.strftime('%Y-%m-%d %H:%M:%S')} {status}")
        
        # X√°c nh·∫≠n x√≥a
        if keep_latest:
            files_to_delete = model_files[1:] + scaler_files[1:]
            print(f"\n‚ö†Ô∏è  S·∫Ω x√≥a {len(files_to_delete)} file c≈© (gi·ªØ l·∫°i file m·ªõi nh·∫•t)")
        else:
            files_to_delete = model_files + scaler_files
            print(f"\n‚ö†Ô∏è  S·∫Ω x√≥a T·∫§T C·∫¢ {len(files_to_delete)} file")
        
        if len(files_to_delete) == 0:
            print("‚úÖ Kh√¥ng c√≥ file n√†o ƒë·ªÉ x√≥a")
            return
        
        # X√≥a c√°c file
        deleted_count = 0
        for file_path in files_to_delete:
            try:
                os.remove(file_path)
                print(f"üóëÔ∏è  ƒê√£ x√≥a: {os.path.basename(file_path)}")
                deleted_count += 1
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ x√≥a {os.path.basename(file_path)}: {str(e)}")
        
        print(f"\n‚úÖ ƒê√£ x√≥a {deleted_count} file c≈©")
        
        # Hi·ªÉn th·ªã file c√≤n l·∫°i
        remaining_models = glob.glob(model_pattern)
        remaining_scalers = glob.glob(scaler_pattern)
        print(f"üìÅ C√≤n l·∫°i {len(remaining_models)} model v√† {len(remaining_scalers)} scaler")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi d·ªçn d·∫πp model c≈©: {str(e)}")

def main():
    """H√†m ch√≠nh"""
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--all":
            # X√≥a t·∫•t c·∫£ model
            cleanup_old_models(keep_latest=False)
        elif sys.argv[1] == "--raw_numbers":
            # X√≥a model raw_numbers c≈©
            cleanup_old_models("raw_numbers", keep_latest=True)
        else:
            print("‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá")
            print("S·ª≠ d·ª•ng:")
            print("  python cleanup_models.py                    # D·ªçn d·∫πp t·∫•t c·∫£ model c≈© (gi·ªØ m·ªõi nh·∫•t)")
            print("  python cleanup_models.py --all              # X√≥a t·∫•t c·∫£ model")
            print("  python cleanup_models.py --raw_numbers      # D·ªçn d·∫πp model raw_numbers c≈©")
    else:
        # D·ªçn d·∫πp t·∫•t c·∫£ model c≈© (gi·ªØ m·ªõi nh·∫•t)
        cleanup_old_models(keep_latest=True)

if __name__ == "__main__":
    main()
